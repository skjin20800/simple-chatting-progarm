package chat;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

public class ChatClient extends JFrame {

	private final static String TAG = "ChatClient :";
	private ChatClient chatClinet = this;

	private static final int PORT = 10001;

	private JButton btnConnect, btnSend; // 앞에 btn 공통적인 컴포넌트 이름지으면 나중에 보기 편함
	private JTextField tfHost, tfChat;
	private JTextArea taChatList;
	private ScrollPane scrollPane;

	private JPanel topPanel, bottomPanel;

	private Socket socket;
	private PrintWriter writer;
	private BufferedReader reader;
	
	

	public ChatClient() {


		init();
		setting();
		batch();

		listener();
		Thread readerThread = new Thread(new ReaderThread());
		readerThread.start();
	
		setVisible(true);
	}

	private void init() {
		btnConnect = new JButton();
		btnSend = new JButton("send");
		tfHost = new JTextField("127.0.0.1", 20);
		tfChat = new JTextField(20);
		taChatList = new JTextArea(10, 30); // row,column
		scrollPane = new ScrollPane();
		topPanel = new JPanel();
		bottomPanel = new JPanel();
		
	}

	private void setting() {
		setTitle("채팅 다대다 클라이언트");
		setSize(500, 500);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		taChatList.setBackground(Color.ORANGE);
		taChatList.setForeground(Color.BLUE);
	}

	private void batch() {
		topPanel.add(tfHost);
		topPanel.add(btnConnect);
		bottomPanel.add(tfChat);
		bottomPanel.add(btnSend);
		scrollPane.add(taChatList);
		
		add(topPanel, BorderLayout.NORTH);
		add(scrollPane, BorderLayout.CENTER);
		add(bottomPanel, BorderLayout.SOUTH);
		
	}

	private void listener() {
		btnConnect.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				connet();
			}
		});
		
		btnSend.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				send();
			}
		});
	}
	
	
		

	private void connet() {

		try {
			String host = tfHost.getText();
			socket = new Socket(host, PORT);
			reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			writer = new PrintWriter(socket.getOutputStream(),true);
		} catch (Exception e1) {
			System.out.println(TAG + "서버 연결 에러" + e1.getMessage());
			e1.printStackTrace();
		}
	}
	
	private void send() {

		String chat = tfChat.getText();
		//1번 taChatList뿌리기
		//2번 서버로 전송
		//3번 tfChat비우기
		Thread writerThread = new Thread(new WriteThread(chat));
		writerThread.start();


	}
	

	class ReaderThread implements Runnable{
		//while을 돌면서 서버로 부터 메시지를 받아서 taChatList에 뿌리기
		@Override
		public void run() {
			try {
				String input = null;
				while((input = reader.readLine()) != null) {
					taChatList.append(input + "\n");
				}
			} catch (Exception e) {
				System.out.println("오류임니당");
				e.printStackTrace();
			}
		}
		}
	
	@NoArgsConstructor
	@AllArgsConstructor
	class WriteThread extends Thread{
		private String chat;
		
		//while을 돌면서 서버로 부터 메시지를 받아서 taChatList에 뿌리기
		@Override
		public void run() {
				writer.println(chat);
				tfChat.setText("");
		}
		}
	
	public static void main(String[] args) {
		new ChatClient();
	}
}
